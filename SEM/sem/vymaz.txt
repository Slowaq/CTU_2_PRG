main.c


#include "main.h"
#include "utils.h"
#include "event_queue.h"
#include "computation.h"
#include "gui.h"
#include "messages.h"
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

// Jhako

void *main_thread(void *d){

    my_assert(d != NULL, __func__, __LINE__, __FILE__);
    int pipe_out = *(int*)d;
    message msg;
    uint8_t msg_buf[sizeof(message)];
    int msg_len;
    bool quit = false; 

    computation_init();
    gui_init();
    // initilize computation, visualization
    do {
        event ev = queue_pop();
        msg.type = MSG_NBR;
        switch (ev.type){
            case EV_QUIT:
                debug("Quit received");
                break;
            case EV_GET_VERSION:
                msg.type = MSG_GET_VERSION;
                break;
            case EV_COMPUTE:
                enable_comp();
                info (compute(&msg) ? "compute" : "fail compute");
                break;
            case EV_ABORT:
                msg.type = MSG_ABORT;  
                break;
            case EV_SET_COMPUTE:
                info (set_compute(&msg) ? "set compute" : "fail set compute");
                break;
            case EV_PIPE_IN_MESSAGE:
                process_pipe_message(&ev);
                break;
            default:
                break;
        }// switch end
        if (msg.type != MSG_NBR){
            my_assert(fill_message_buf(&msg, msg_buf, sizeof(message), &msg_len), __func__, __LINE__, __FILE__);
            if (write(pipe_out,msg_buf, msg_len) == msg_len){
                debug("send data to pipe_out");
            } else{
                error("send message fail!");
            }
        }
        quit = is_quit();
    } while(!quit);
    gui_cleanup();
    computation_cleanup();
    //  cleanup computation, visualization
    return NULL;
}

void process_pipe_message(event * const ev){
    my_assert(ev != NULL && ev->type == EV_PIPE_IN_MESSAGE && ev -> data.msg, __func__, __LINE__, __FILE__);
    ev->type = EV_TYPE_NUM;
    const message *msg = ev->data.msg;
    switch (msg->type){
        case MSG_OK:
            info("OK");
            break;
        case MSG_VERSION:
            fprintf(stderr, "INFO: Module version %d.%d-p%d\n", msg->data.version.major, msg->data.version.minor, msg->data.version.patch);
            break;
        case MSG_COMPUTE_DATA:
            if (!is_abort()){
                update_data(&(msg->data.compute_data));
            }
            break;
        case MSG_ABORT:
            info("Computation done.");
            break;
        case MSG_DONE:
            gui_refresh();
            if (is_done()){
                info("Computation done");
            } else {
                event ev = { .type = EV_COMPUTE};
                queue_push(ev);
            }
            break;
        default:
            fprintf(stderr, "Unhandled pipe message type %d\n", msg->type);
            break;
    }
    free (ev->data.msg);    
    ev->data.msg = NULL;
}



keyboard.c

#include "keyboard.h"
#include "event_queue.h"
#include "utils.h"

#include <stdlib.h>
#include <stdio.h>

void *keyboard_thread(void *d){
    fprintf(stderr, "keyboard_thread - start\n");
    call_termios(0);
    int c;
    event ev;
    while ((c = getchar()) != 'q'){
        ev.type = EV_TYPE_NUM;
        switch(c) {
            case 'g':
                // get version
                ev.type = EV_GET_VERSION;
                debug("g pressed.");
                break;
            case 'a':
                //abort 
                ev.type = EV_ABORT;
                debug("a pressed.");
                break;
            case 's':
                // set compute
                ev.type = EV_SET_COMPUTE;
                debug("s pressed.");
                break;
            case 'c':
                // compute with PC
                ev.type = EV_COMPUTE;
                debug("c pressed.");
                break;
            case '1':
                // compute 
                ev.type = 
            default:
                break;
        } // end switch
        if (ev.type != EV_TYPE_NUM){
            queue_push(ev);
        }
    } // end while
    set_quit();
    ev.type = EV_QUIT;
    queue_push(ev);
    
    call_termios(1); // restore terminal settings
    fprintf(stderr, "keyboard_thread - finished\n");
    return NULL;
}



computation.c


#include "computation.h"
#include "utils.h"
#include "messages.h"

#include <stdbool.h>

static struct {
    double c_re;
    double c_im;
    int n;

    double range_re_min;
    double range_re_max;
    double range_im_min;
    double range_im_max;

    int grid_w;
    int grid_h;

    int cur_x;
    int cur_y;

    double d_re;
    double d_im;

    int nbr_chunks;
    int cid;
    double chunk_re;
    double chunk_im;

    uint8_t chunk_n_re;
    uint8_t chunk_n_im;
    
    uint8_t *grid;
    bool computing;
    bool abort;
    bool done;

} comp = {
    .c_re = -0.4,
    .c_im = 0.6,

    .n = 60,

    .range_re_min = -1.6,
    .range_re_max = 1.6,
    .range_im_min = -1.1,
    .range_im_max = 1.1,

    .grid = NULL,
    .grid_w = 640,
    .grid_h = 480,

    .chunk_n_re = 64,
    .chunk_n_im = 48,

    .computing = false,
    .abort = false,
    .done = false,
};

void computation_init(void){
    comp.grid = my_alloc(comp.grid_w * comp.grid_h);
    comp.d_re = (comp.range_re_max - comp.range_re_min) / (1. * comp.grid_w); 
    comp.d_im = -(comp.range_im_max - comp.range_im_min) / (1. * comp.grid_h); 
    comp.nbr_chunks = (comp.grid_w * comp.grid_h) / (comp.chunk_n_re * comp.chunk_n_im); 
}

void computation_cleanup(void){
    if(comp.grid) free (comp.grid); 
    comp.grid = NULL;
}
bool is_computing(void) {return comp.computing;}
bool is_done(void) {return comp.done;}
bool is_abort(void) {return comp.abort;}

void get_grid_size(int *w, int *h){
    *w = comp.grid_w;
    *h = comp.grid_h;
}

void abort_comp(void){comp.abort =  false;}
void enable_comp(void){comp.abort =  false;}

bool set_compute(message *msg){
    my_assert(msg != NULL, __func__, __LINE__, __FILE__);
    bool ret = !is_computing();
    if(ret){
        msg->type = MSG_SET_COMPUTE;
        msg->data.set_compute.c_re = comp.c_re;
        msg->data.set_compute.c_im = comp.c_im;
        msg->data.set_compute.d_re = comp.d_re;
        msg->data.set_compute.d_im = comp.d_im;
        msg->data.set_compute.n = comp.n;
        comp.done = false;
    }
    return ret;
}

bool  compute(message *msg){
    my_assert(msg != NULL, __func__, __LINE__, __FILE__);
    if (!is_computing()){ // first chunk
        comp.cid = 0;
        comp.computing = true;
        comp.cur_x = comp.cur_y = 0; // start computation of the whole image
        comp.chunk_re = comp.range_re_min; // upper - "left" corner
        comp.chunk_im = comp.range_im_max; // "upper" - left corner
        msg->type = MSG_COMPUTE;
    } else { // next chunk
        comp.cid += 1;
        if (comp.cid < comp.nbr_chunks){
            comp.cur_x += comp.chunk_n_re;
            comp.chunk_re += comp.chunk_n_re * comp.d_re;
            if(comp.cur_x >= comp.grid_w){
                comp.chunk_re = comp.range_re_min;
                comp.chunk_im += comp.chunk_n_im * comp.d_im;
                comp.cur_x = 0;
                comp.cur_y += comp.chunk_n_im;
            }
            msg->type = MSG_COMPUTE;
        } else {
            // all has been compute
        }
    }

    if (comp.computing && msg->type == MSG_COMPUTE){
        msg->data.compute.cid = comp.cid; 
        msg->data.compute.re = comp.chunk_re;
        msg->data.compute.im = comp.chunk_im;
        msg->data.compute.n_re = comp.chunk_n_re;
        msg->data.compute.n_im = comp.chunk_n_im;
    }

    return is_computing();
}

void update_image(int w, int h, unsigned char *img){
    my_assert(img && comp.grid && w == comp.grid_w && h == comp.grid_h, __func__, __LINE__, __FILE__);
    for (int i = 0; i < w * h; ++i){
        const double t = 1. * comp.grid[i] / (comp.n + 1.0); 
        *(img++) = 9 * (1-t) *t*t*t * 255;
        *(img++) = 15 * (1-t) * (1-t)*t*t * 255;
        *(img++) = 8.5 * (1-t) * (1-t) * (1-t) * t * 255;

    }
}

void update_data(const msg_compute_data *computation_data){
    my_assert(computation_data != NULL, __func__, __LINE__, __FILE__);
    if (computation_data->cid == comp.cid){
        const int idx = comp.cur_x + computation_data->i_re + (comp.cur_y + computation_data->i_im) * comp.grid_w;
        if (idx >= 0 && idx < (comp.grid_w * comp.grid_h)){
            comp.grid[idx] = computation_data->iter;
        }
        if ((comp.cid + 1) >= comp.nbr_chunks && (computation_data->i_re + 1) == comp.chunk_n_re && (computation_data->i_im + 1) == comp.chunk_n_im){
            comp.done = true;
            comp.computing = false;
        }
    } else {
        error("Received chunk with unexpected chunk id (cid)");
    };
}




utils.c


#include "utils.h"

#include <stdio.h>
#include <termios.h>
#include <unistd.h> // for STDIN_FILENO

void my_assert(bool r, const char *fcname , int line, const char *fname){
    if(!r){
        fprintf(stderr, "ERROR: my_assert FAIL: %s() line %d in %s\n", fcname, line, fname);
        exit(105);
    }
}

void *my_alloc(size_t size){  
    void *ret = malloc(size);
    if(!ret){
        fprintf(stderr, "error");
        exit(102);
    }
    return ret;
}

// - function -----------------------------------------------------------------
void call_termios(int reset) {
    static struct termios tio, tioOld;
    tcgetattr(STDIN_FILENO, &tio);
    
    if (reset) {
        tcsetattr(STDIN_FILENO, TCSANOW, &tioOld);
    } else {
        tioOld = tio;
        cfmakeraw(&tio);
        tcsetattr(STDIN_FILENO, TCSANOW, &tioOld);

        tio.c_lflag |= OPOST;
        tcsetattr(STDIN_FILENO, TCSANOW, &tio);
    }
}

void info(const char *str){
    fprintf(stderr, "INFO: %s\n", str);
}
void debug(const char *str){
    fprintf(stderr, "DEBUG: %s\n", str);
}
void error(const char *str){
    fprintf(stderr, "ERROR: %s\n", str);
}




messages.h


/*
 * Filename: messages.h
 * Date:     2017/04/15 11:21
 * Author:   Jan Faigl
 */

#ifndef __MESSAGES_H__
#define __MESSAGES_H__

#include <stdint.h>
#include <stdbool.h>

// Definition of the communication messages
typedef enum {
   MSG_OK,               // ack of the received message
   MSG_ERROR,            // report error on the previously received command
   MSG_ABORT,            // abort - from user button or from serial port
   MSG_DONE,             // report the requested work has been done
   MSG_GET_VERSION,      // request version of the firmware
   MSG_VERSION,          // send version of the firmware as major,minor, patch level, e.g., 1.0p1
   MSG_STARTUP,          // init message (id, up to 9 bytes long string, cksum)
   MSG_SET_COMPUTE,      // set computation parameters
   MSG_COMPUTE,          // request computation of a batch of tasks (chunk_id, nbr_tasks)
   MSG_COMPUTE_DATA,     // computed result (chunk_id, result)
   MSG_NBR
} message_type;

#define STARTUP_MSG_LEN 9

typedef struct {
   uint8_t major;
   uint8_t minor;
   uint8_t patch;
} msg_version;

typedef struct {
   uint8_t message[STARTUP_MSG_LEN];
} msg_startup;

typedef struct {
   double c_re;  // re (x) part of the c constant in recursive equation
   double c_im;  // im (y) part of the c constant in recursive equation
   double d_re;  // increment in the x-coords
   double d_im;  // increment in the y-coords
   uint8_t n;    // number of iterations per each pixel
} msg_set_compute;

typedef struct {
   uint8_t cid; // chunk id
   double re;    // start of the x-coords (real)
   double im;    // start of the y-coords (imaginary)
   uint8_t n_re; // number of cells in x-coords
   uint8_t n_im; // number of cells in y-coords
} msg_compute;

typedef struct {
   uint8_t cid;  // chunk id
   uint8_t i_re; // x-coords 
   uint8_t i_im; // y-coords
   uint8_t iter; // number of iterations
} msg_compute_data;

typedef struct {
   uint8_t type;   // message type
   union {
      msg_version version;
      msg_startup startup;
      msg_set_compute set_compute;
      msg_compute compute;
      msg_compute_data compute_data;
   } data;
   uint8_t cksum; // message command
} message;

// return the size of the message in bytes
bool get_message_size(uint8_t msg_type, int *size);

// fill the given buf by the message msg (marhaling);
bool fill_message_buf(const message *msg, uint8_t *buf, int size, int *len);

// parse the message from buf to msg (unmarshaling)
bool parse_message_buf(const uint8_t *buf, int size, message *msg);

#endif

/* end of messages.h */



prgsem.c


#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

#include "main.h"
#include "utils.h"
#include "keyboard.h"
#include "messages.h"
#include "event_queue.h"
#include "prg_io_nonblock.h"    

#ifndef IO_READ_TIMEOUT_MS
#define  IO_READ_TIMEOUT_MS 100
#endif

// Jhako sh create_pipes.sh na kompilaci, pak spusteni

void *read_pipe_thread(void *);

int main(int argc, char *argv[]){
    int ret = EXIT_SUCCESS;
    const char *fname_pipe_in = argc > 1 ? argv[1] : "/tmp/computational_module.out";
    const char *fname_pipe_out = argc > 2 ? argv[2] :"/tmp/computational_module.in";

    int pipe_in = io_open_read(fname_pipe_in);
    int pipe_out = io_open_write(fname_pipe_out);

    my_assert(pipe_in != -1 && pipe_out != -1, __func__, __LINE__, __FILE__);
    
    enum{
        KEYBOARD_THRD,
        READ_PIPE_THRD,
        MAIN_THRD,
        NUM_THREADS
    };

    const char *thrd_names[] = {"Keyboard", "Readpipe", "Main"};
    void *(*thrd_functions[])(void*) = { keyboard_thread, read_pipe_thread, main_thread};
    pthread_t threads[NUM_THREADS];
    void *thrd_data[NUM_THREADS] = {0};
    thrd_data[READ_PIPE_THRD] = &pipe_in;
    thrd_data[MAIN_THRD] = &pipe_out;

    for (int i = 0; i < NUM_THREADS; ++i) {
        int r = pthread_create(&threads[i], NULL, thrd_functions[i], thrd_data[i]);
        printf("Create thread '%s' %s\r\n", thrd_names[i], (r == 0 ? "OK" : "FAIL"));
    }

    // Přidat čekání na ukončení vláken s kontrolou stavu
    int *ex;
    for (int i = 0; i < NUM_THREADS; ++i) {
        printf("Call join to the thread %s\r\n", thrd_names[i]);
        int r = pthread_join(threads[i], (void*)&ex);
        printf("Joining the thread %s has been %s\r\n", thrd_names[i], (r == 0 ? "OK" : "FAIL"));
    }

    io_close(pipe_in);
    io_close(pipe_out);

    return ret;
}

void *read_pipe_thread(void *d){
    my_assert(d != NULL, __func__, __LINE__, __FILE__);
    int pipe_in = *(int*)d;
    printf("%i\n",*(int*)d );
    fprintf(stderr, "read_pipe_thread - start \n");
    bool end = false;
    uint8_t msg_buf[sizeof(message)];
    int i = 0;
    int len = 0;

    unsigned char c;
    while (io_getc_timeout(pipe_in, IO_READ_TIMEOUT_MS, &c) > 0) {}; // discard garbage
    
    while (!end){
        int r = io_getc_timeout(pipe_in, IO_READ_TIMEOUT_MS, &c);
        if (r > 0){ // char has been read
            if (i == 0){    
                len = 0;
                if (get_message_size(c, &len)){
                    msg_buf[i++] = c;
                } else {
                    fprintf(stderr, "ERROR: unknown message type 0x%x\n", c);
                }
            } else { //read remaining bytes of the message
                msg_buf[i++] = c;
            }
            if (len > 0 && i == len){
                message *msg =  my_alloc(sizeof(message));
                if (parse_message_buf(msg_buf, len, msg)) {
                    event ev = { .type = EV_PIPE_IN_MESSAGE };
                    ev.data.msg = msg;
                    queue_push(ev);
                } else {
                    fprintf(stderr, "ERROR: cannot parse message type %d\n", msg_buf[0]);
                    free(msg);
                }
                i = len = 0;
            }
        } else if (r == 0){ // timeout

        } else{ //error
            fprintf(stderr, "ERROR: reading for pipe\n");
            set_quit();
            event ev = { .type = EV_QUIT };
            queue_push(ev);
        }
        end = is_quit();
    } // end while 
    fprintf(stderr, "read_pipe_thread - finished\n");
    return NULL;
}




gui.c



#include "gui.h"
#include "xwin_sdl.h"
#include "utils.h"
#include "computation.h" 


static struct{
    int w;
    int h;
    unsigned char *img; 
} gui = { .img = NULL};

void gui_init(void){
    get_grid_size(&gui.w, &gui.h);
    gui.img = my_alloc(gui.w * gui.h * 3);
    my_assert(xwin_init(gui.w, gui.h) == 0, __func__, __LINE__, __FILE__);
}

void gui_cleanup(void){
    if(gui.img){
        free(gui.img);
        gui.img = NULL;
    }
    xwin_close();
}

void gui_refresh(void){
    if (gui.img) {
        update_image(gui.w, gui.h, gui.img);
        xwin_redraw(gui.w, gui.h, gui.img);
    }
}





event_queue.c



#include "event_queue.h"
#include <pthread.h>
#include <stdbool.h>
#include <stdlib.h>

#ifndef QUEUE_CAPACITY
#define QUEUE_CAPACITY 32
#endif

typedef struct{
    event queue[QUEUE_CAPACITY];
    int in;
    int out;
    pthread_mutex_t mtx;
    pthread_cond_t cond;
    bool quit;
} queue;

static queue q = { .in = 0, .out = 0};

void queue_init(void){
    pthread_mutex_init(&q.mtx, NULL);
    pthread_cond_init(&q.cond, NULL);
}

void queue_cleanup(void){
    while(q.in != q.out){
        event ev = queue_pop();
        if (ev.data.msg){
            free(ev.data.msg);
        }
    }
}

event queue_pop(void){
    event ev = { .type = EV_TYPE_NUM};
    pthread_mutex_lock(&(q.mtx));
    while (!q.quit && q.in == q.out){
        pthread_cond_wait (&(q.cond), &(q.mtx));
    }

    if (q.in != q.out){
        ev = q.queue[q.out];
        q.out = (q.out + 1) % QUEUE_CAPACITY;
        pthread_cond_broadcast(&(q.cond));
    }
    pthread_mutex_unlock(&(q.mtx));
    return ev;
}

void queue_push(event ev){  
    pthread_mutex_lock(&(q.mtx));
    while(((q.in + 1) % QUEUE_CAPACITY) == q.out){
        pthread_cond_wait(&(q.cond), &(q.mtx));
    }
    q.queue[q.in] = ev;
    q.in = (q.in + 1) % QUEUE_CAPACITY;
    pthread_cond_broadcast(&(q.cond));
    pthread_mutex_unlock(&(q.mtx));
}

bool is_quit(void){
    bool quit;
    pthread_mutex_lock(&(q.mtx));
    quit = q.quit;
    pthread_mutex_unlock(&(q.mtx));
    return quit;
}

void set_quit(void){ 
    pthread_mutex_lock(&(q.mtx));
    q.quit = true;
    pthread_mutex_unlock(&(q.mtx));
}

